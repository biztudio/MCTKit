<template>

<view>
    <wxc-flex class="wrap" wrap="{{wrap}}">
        <view class="item" wx:for="{{cell_value_list}}" wx:key="idx" wx:for-item="item">
          {{item}}
        </view>
    </wxc-flex>
</view>    

<view class="section">
  <button type="primary" size="{{primarySize}}" loading="{{loading}}" plain="{{plain}}" lang="zh_CN"
        disabled="{{disabled_btnstart}}" bindtap="addnewpractise" hover-class="other-button-hover">{{btnname_start}}</button>

   <button type="warn" size="{{warnSize}}" loading="{{loading}}" plain="{{plain}}" lang="zh_CN"
        disabled="{{disabled_btncomplete}}" bindtap="completepractise">{{btnname_complete}}</button>      
</view>

 <view>
      <wxc-steps steps="{{steps}}" current="{{current}}"></wxc-steps>
 </view>

<wxc-toast
    is-show="{{$toast.show}}"
    text="{{score_message}}"
    ></wxc-toast>
</template>
<script>
import mathkit from '../lib/mathkit.js'

let default_list = []
for(let i = 1; i < 26; i++){
    default_list.push(i);
}
console.log('I like schulte grid.')
//const app = getApp()

export default {

 config: {
        usingComponents: {
            'wxc-flex':  '@minui/wxc-flex',
            'wxc-toast': '@minui/wxc-toast',
            'wxc-steps': '@minui/wxc-steps'   
        }
    },

 data:{
    userInfo: {},
    hasUserInfo: false,

     steps: [{
        title: '步骤1',
        desc: '点击绿色“开练”按钮进行计时的顺序搜索'
        }, {
        title: '步骤2',
        desc: '搜索完成，立刻点击红色“完成”按钮'
        }],
     current: 1,

     wrap: 'wrap',
   
     $toast: { show: false },
     
     cell_value_list:default_list,
     score_second:0,
     score_message:'',
     btnname_start:'开练',
     btnname_complete:'完成',
     disabled_btnstart:false,
     disabled_btncomplete:false,
     max_time_seconds:600,
     timerid:0
 },   

 methods:{
    resetstartbutton:function(){
        clearInterval(this.data.timerid) 
        this.setData({score_second:0})
        this.setData({disabled_btnstart:false})
        this.setData({btnname_start:'开练'})
    },

    showtoastinfo:function(message, show_seconds){
        this.setData({score_message:message}) 
        this.setData({ $toast: { show: true } })
        setTimeout(() => { this.setData({ $toast: { show: false }}) }, show_seconds)
    },

    setWrapToWrap: function () {
      this.setData({
        wrap: 'wrap'
      })
    },

    addnewpractise:function(event){
         let x_axis_length = 5
         let y_axis_length = 5
         let value_list = []
         let digit_pool = []
         for(let i = 1; i <= x_axis_length * y_axis_length; i++){ digit_pool.push(i); }
         let temp_pool = digit_pool.slice(0)
         for(let i = 0; i < digit_pool.length; i++){
                        let index = mathkit.get_random_number_index(temp_pool.length);
                        let number = temp_pool[index];
                        value_list.push(number);
                        temp_pool.splice(index, 1);
         }
         this.setData({cell_value_list:value_list})
         this.setData({score_second:0})
         this.setData({disabled_btnstart:true})          
         this.setData({timerid:setInterval(()=>{
             let currentsecond = this.data.score_second + 1
             this.setData({score_second:currentsecond})
             this.setData({btnname_start:'训练计时中: ' + currentsecond + ' 秒'})
              
             if(currentsecond > this.data.max_time_seconds){
                  this.resetstartbutton()
                  let message = '用时过长!\n请认真重新再来一次，拜托了.'
                  this.showtoastinfo(message, 3000)
             }
         }, 1000)})
    },

    getUserInfo: function() {

      this.setData({
        userInfo: app.globalData.userInfo,
        hasUserInfo: true
      })
    },

    completepractise:function(event){
       let message = ''
       
       if(this.data.score_second >= 10){
            //this.getUserInfo(event)
            //message = '恭喜'+ this.data.userInfo.nickName +'完成训练! \n本次训练用时 ' + (this.data.score_second) + ' 秒'
            message = '恭喜完成挑战! \n本次训练用时 ' + (this.data.score_second) + ' 秒'
            this.resetstartbutton()
            this.showtoastinfo(message, 4321)
            return
       }
       else if(this.data.score_second > 0 && this.data.score_second < 10){
          let message = '理论上不可能这么快完成!\n请认真重新再来一次，拜托了.'
          this.resetstartbutton()
          this.showtoastinfo(message, 3000)
          return
       }
       this.resetstartbutton()
    }
  }
}
</script>

<style>
  .wrap {
    display: block;
    padding: 10rpx;
    background: #AAAAAA;
  }
  .item {
    min-width: 20%;
    min-height: 100rpx;
    font-size: 60rpx;
    text-align: center;
  }
  .item:nth-of-type(odd) {
    line-height: 100rpx;
    background: #C7EDCC
  }
  .item:nth-of-type(2n) {
    line-height: 100rpx;
    background: #FFDDAA
  }

</style>
